#!/usr/bin/env -S poetry run python3

from pathlib import Path

import click
import torch
from torch.nn import Conv2d, PixelShuffle, Sequential, Tanh
from torch.utils.data import DataLoader
from torchvision.transforms import Normalize
from tqdm import tqdm

from cardboard4 import TensorPairsDataset, mean_psnr, mean_ssim


class ESPCN(Sequential):
    SCALE = 3
    N0 = 3

    F1 = 5
    N1 = 64

    F2 = 3
    N2 = 32

    F3 = 3
    N3 = N0 * (SCALE ** 2)

    def __init__(self):
        super().__init__()

        self.normalize = Normalize(
            std=[0.2931, 0.2985, 0.2946], mean=[0.7026, 0.6407, 0.6265]
        )

        self.stem = Sequential(
            Conv2d(self.N0, self.N1, self.F1, padding="same"),
            Tanh(),
            Conv2d(self.N1, self.N2, self.F2, padding="same"),
            Tanh(),
        )
        self.head = Sequential(
            Conv2d(self.N2, self.N3, self.F3, padding="same"),
            PixelShuffle(self.SCALE),
        )


@torch.no_grad()
def forward(model, device, dataset, batch_size):
    loader = DataLoader(dataset, batch_size, drop_last=True, shuffle=False)

    model.eval()

    epoch_mean_psnr = 0.0
    epoch_mean_ssim = 0.0

    for batch, (x, y) in enumerate(tqdm(loader), start=1):
        x = x.to(device)
        y = y.to(device)

        z = model(x).clamp(0.0, 1.0)

        epoch_mean_psnr += (mean_psnr(z, y).item() - epoch_mean_psnr) / batch
        epoch_mean_ssim += (mean_ssim(z, y).item() - epoch_mean_ssim) / batch

    return epoch_mean_psnr, epoch_mean_ssim


@click.command()
@click.option("--device", default="cuda:0", type=torch.device)
@click.option("--models", required=True, type=Path)
@click.option("--dataset", required=True, type=Path)
@click.option("--batch-size", default=32)
def cli(device, models, dataset, batch_size):
    state = torch.load(models)

    model = ESPCN().to(device)
    model.load_state_dict(state["model"])

    psnr, ssim = forward(model, device, TensorPairsDataset(dataset), batch_size)
    print(dataset, models, f"{psnr:.2f} {ssim:.4f}")


if __name__ == "__main__":
    cli()
