#!/usr/bin/env -S poetry run python3

from json import loads
from pathlib import Path
from random import shuffle
from shutil import copy

import click
from PIL import Image, UnidentifiedImageError
from tqdm import tqdm

SETS = {
    "testing": 5_000,
    "training": 30_000,
}


def is_between(path: Path, lower: int, upper: int):
    try:
        with Image.open(path) as image:
            return all(lower <= size <= upper for size in image.size)
    except UnidentifiedImageError:
        return False


@click.command()
@click.option("--metadata", required=True, type=Path)
@click.option("--source", required=True, type=Path)
@click.option("--target", required=True, type=Path)
def cli(metadata: Path, source: Path, target: Path):
    target.mkdir(exist_ok=True, parents=True)

    available = set()

    for file in tqdm(metadata.glob("*"), desc="Loading metadata"):
        with open(file) as lines:
            for line in lines:
                current = loads(line)

                if (
                    current["rating"] == "s"
                    and 96 <= int(current["image_width"]) <= 1024
                    and 96 <= int(current["image_height"]) <= 1024
                ):
                    available.add(current["id"])

    candidates = [
        file
        for file in tqdm(list(source.glob("**/*")), desc="Filtering")
        if file.stem in available and file.suffix in [".png", ".jpg", ".jpeg"]
    ]
    shuffle(candidates)

    skip = 0
    for name, size in SETS.items():
        subset = target / name
        subset.mkdir(exist_ok=True)

        for candidate in tqdm(candidates[skip : skip + size], desc=f"Linking `{name}`"):
            source_: Path = candidate.resolve()
            target_: Path = subset / source_.name

            copy(source_, target_)

        skip += size


if __name__ == "__main__":
    cli()
